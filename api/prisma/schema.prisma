// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String   @unique
  email     String   @unique @default("")
  password  String
  salt      String
  mfa       Boolean  @default(false)
  privilege Int      @default(0)

  contests   UsersOnContests[]
  Submission Submission[]
}

model Contest {
  id        Int      @id @default(autoincrement())
  name      String
  tag       String   @unique
  createdAt DateTime @default(now())

  participants UsersOnContests[]
  problems     Problem[]
  rounds       Round[]
}

model UsersOnContests {
  contest   Contest @relation(fields: [contestId], references: [id])
  User      User    @relation(fields: [userId], references: [id])
  userId    Int
  contestId Int

  assignedAt DateTime @default(now())

  @@id([userId, contestId])
}

model Problem {
  id             Int      @id @default(autoincrement())
  tag            String
  name           String
  createdAt      DateTime @default(now())
  memoryLimit    Int      @default(0)
  timeLimit      Int      @default(0)
  difficulty     String   @default("EASY")
  maxSubmissions Int      @default(1)

  Contest     Contest       @relation(fields: [contestId], references: [id])
  contestId   Int
  Submission  Submission[]
  ProblemTest ProblemTest[]
  Round       Round?        @relation(fields: [roundId], references: [id])
  roundId     Int?
}

model Submission {
  id          Int      @id @default(autoincrement())
  submittedAt DateTime @default(now())

  serverId String @unique

  problem   Problem @relation(fields: [problemId], references: [id])
  problemId Int

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  resultsAvailable Boolean @default(false)

  results   Results? @relation(fields: [resultsId], references: [id])
  resultsId Int?     @unique
}

model Results {
  id          Int      @id @default(autoincrement())
  submittedAt DateTime @default(now())
  score       Int      @default(0)

  Submission Submission?
  TestResult TestResult[]
}

model ProblemTest {
  id Int @id @default(autoincrement())

  input       String // filename with the test
  expectedOut String // file
  score       Int    @default(0) // points uwu 

  problem    Problem      @relation(fields: [problemId], references: [id])
  problemId  Int
  TestResult TestResult[]
}

model TestResult {
  id    Int @id @default(autoincrement())
  score Int

  test          ProblemTest @relation(fields: [problemTestId], references: [id])
  problemTestId Int

  results   Results? @relation(fields: [resultsId], references: [id])
  resultsId Int?
}

model Round {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  startsAt DateTime
  endsAt   DateTime

  problems Problem[]

  Contest   Contest? @relation(fields: [contestId], references: [id])
  contestId Int?
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
